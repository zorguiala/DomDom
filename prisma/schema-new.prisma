// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////
// Enums
////////////////////////////////////////////////////
enum Role {
  ADMIN
  SALES
  INVENTORY
  HR
}

enum PurchaseStatus {
  DRAFT
  CONFIRMED
  RECEIVED
}

enum SaleType {
  DOOR_TO_DOOR
  CLASSIC
}

enum SaleStatus {
  QUOTE
  CONFIRMED
  DELIVERED
}

enum ProductionStatus {
  PLANNED
  IN_PROGRESS
  DONE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
}

////////////////////////////////////////////////////
// Core Authentication
////////////////////////////////////////////////////
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  passwordHash  String
  name          String?
  role          Role     @default(ADMIN)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

////////////////////////////////////////////////////
// Master Data
////////////////////////////////////////////////////
model Product {
  id             Int      @id @default(autoincrement())
  name           String
  sku            String   @unique
  category       String?
  unit           String
  priceSell      Float
  priceCost      Float
  qtyOnHand      Float    @default(0)
  minQty         Float?
  isRawMaterial  Boolean  @default(false)
  isFinishedGood Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  bomComponents    BomComponent[]
  purchaseItems    PurchaseItem[]
  saleItems        SaleItem[]
  stockMoves       StockMovement[]
  productionOrders ProductionOrder[]

  @@map("products")
}

////////////////////////////////////////////////////
// Inventory & Manufacturing
////////////////////////////////////////////////////
model BillOfMaterials {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  finalProductId  Int
  components      BomComponent[]
  productionOrders ProductionOrder[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("bill_of_materials")
}

model BomComponent {
  id        Int             @id @default(autoincrement())
  bomId     Int
  bom       BillOfMaterials @relation(fields: [bomId], references: [id], onDelete: Cascade)
  productId Int
  product   Product         @relation(fields: [productId], references: [id])
  quantity  Float
  unit      String

  @@map("bom_components")
}

model ProductionOrder {
  id              Int              @id @default(autoincrement())
  orderNumber     String           @unique
  bomId           Int?
  bom             BillOfMaterials? @relation(fields: [bomId], references: [id])
  productId       Int
  product         Product          @relation(fields: [productId], references: [id])
  qtyOrdered      Float
  qtyProduced     Float            @default(0)
  status          ProductionStatus @default(PLANNED)
  priority        String?
  startDate       DateTime?
  expectedEndDate DateTime?
  actualEndDate   DateTime?
  startedAt       DateTime?
  finishedAt      DateTime?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("production_orders")
}

model StockMovement {
  id           Int      @id @default(autoincrement())
  productId    Int
  product      Product  @relation(fields: [productId], references: [id])
  qty          Float
  movementType String
  movementDate DateTime @default(now())
  reference    String?
  reason       String?
  notes        String?
  createdAt    DateTime @default(now())

  @@map("stock_movements")
}

////////////////////////////////////////////////////
// Purchasing
////////////////////////////////////////////////////
model Purchase {
  id            Int            @id @default(autoincrement())
  orderNumber   String         @unique
  poNumber      String         @unique
  supplierName  String
  supplierEmail String?
  status        PurchaseStatus @default(DRAFT)
  orderDate     DateTime       @default(now())
  expectedDate  DateTime?
  receivedDate  DateTime?
  totalAmount   Float
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  items         PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id          Int      @id @default(autoincrement())
  purchaseId  Int
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  qtyOrdered  Float
  qtyReceived Float    @default(0)
  unitCost    Float
  totalCost   Float

  @@map("purchase_items")
}

////////////////////////////////////////////////////
// Sales
////////////////////////////////////////////////////
model Sale {
  id            Int        @id @default(autoincrement())
  saleNumber    String     @unique
  customerName  String
  customerEmail String?
  customerPhone String?
  type          SaleType   @default(CLASSIC)
  status        SaleStatus @default(QUOTE)
  orderDate     DateTime   @default(now())
  saleDate      DateTime   @default(now())
  deliveryDate  DateTime?
  totalAmount   Float
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  items         SaleItem[]

  @@map("sales")
}

model SaleItem {
  id           Int     @id @default(autoincrement())
  saleId       Int
  sale         Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId    Int
  product      Product @relation(fields: [productId], references: [id])
  qty          Float
  unitPrice    Float
  totalPrice   Float
  deliveredQty Float   @default(0)

  @@map("sale_items")
}

////////////////////////////////////////////////////
// HR & Payroll
////////////////////////////////////////////////////
model Employee {
  id         Int      @id @default(autoincrement())
  employeeId String   @unique
  name       String
  email      String?  @unique
  phone      String?
  department String?
  position   String?
  salary     Float?
  hireDate   DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  attendance Attendance[]
  payrolls   Payroll[]

  @@map("employees")
}

model Attendance {
  id          Int              @id @default(autoincrement())
  employeeId  Int
  employee    Employee         @relation(fields: [employeeId], references: [id])
  date        DateTime
  status      AttendanceStatus @default(PRESENT)
  hoursWorked Float?
  notes       String?
  createdAt   DateTime         @default(now())

  @@unique([employeeId, date])
  @@map("attendance")
}

model Payroll {
  id         Int      @id @default(autoincrement())
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  month      Int
  year       Int
  baseSalary Float
  overtime   Float    @default(0)
  deductions Float    @default(0)
  netSalary  Float
  createdAt  DateTime @default(now())

  @@unique([employeeId, month, year])
  @@map("payrolls")
}

////////////////////////////////////////////////////
// Expenses
////////////////////////////////////////////////////
model Expense {
  id          Int      @id @default(autoincrement())
  description String
  category    String
  amount      Float
  expenseDate DateTime @default(now())
  receipt     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}
