---
description: 
globs: 
alwaysApply: true
---
---
applyTo: "**"
---

Coding standards, domain knowledge, and preferences that AI should follow.

- Use consistent naming conventions (e.g., camelCase for variables and functions, PascalCase for classes).
- Write clear and concise comments to explain complex logic.
- Follow DRY (Don't Repeat Yourself) principles to reduce code duplication.
- Use TypeScript features like interfaces and types for better type safety.
- Keep functions small and focused on a single task.
- Write unit tests for all new features and bug fixes.
- Use async/await for asynchronous code to improve readability.
- Handle errors gracefully and provide helpful error messages.
- Keep dependencies up to date and remove unused ones.
- Follow the project's folder structure and organization conventions.
- Use descriptive commit messages that explain the changes made.
- Ensure code is well-documented, including public APIs and complex algorithms.
- Use ESLint and Prettier for code linting and formatting.
- Optimize performance where necessary, but prioritize readability and maintainability.
- Use version control best practices, including branching strategies and pull request reviews.
- Follow security best practices, such as input validation and sanitization.
- Use environment variables for configuration settings.
- Ensure accessibility standards are met in UI components.
- Use semantic HTML and ARIA roles for better accessibility.
- Write responsive designs that work well on various screen sizes.
- Use feature flags for new features to allow gradual rollouts.
- Document APIs using OpenAPI or similar standards.
- Use Magic UI MCP Server for UI components and design consistency.
- Ensure that all code is compatible with the latest stable version of TypeScript.
- File names should be descriptive and match the primary export of the file.
- Use consistent indentation and spacing throughout the codebase.
- Code should be modular and reusable, promoting component-based architecture.
- Code complexity should be minimized by breaking down large components into smaller, manageable pieces.
- Use descriptive variable names that convey their purpose.
- Use md files for documentation, including README files for each module or feature.
- Currently using powershell of windows, so please ensure compatibility with it.
- Use GitHub Actions for CI/CD workflows, ensuring that all tests pass before merging code.
- Every UI gerenration it should use Magic UI MCP tool.
- Always use React Query for all data fetching and mutation operations. Do not use useEffect for data fetching.
- Place all React Query hooks in a data/ subfolder within the relevant feature/module directory.
- Use the following file naming pattern for hooks:
  <feature>/data/use-get-<resource>/use-get-<resource>.ts
  <feature>/data/use-create-<resource>/use-create-<resource>.ts
  Example: app/inventory/data/use-get-products/use-get-products.ts
- All data-fetching and mutation logic must be separated from UI components using custom hooks.
- Define all API response/request types in the types/ directory or a types.ts file within the feature.
- Document all custom hooks with JSDoc comments.
- Each module/feature should have a README.md explaining its purpose and usage.
- Write unit tests for all hooks and components. Use integration tests for critical flows.
- Use React Query's error and loading states, and consider global error boundaries for robust error handling.
- Set appropriate staleTime and gcTime for queries to optimize caching and performance.
- Use query keys that reflect the data's scope and dependencies.
- Enforce these rules in PR reviews:
  - Are all data operations using React Query hooks in the correct location and naming pattern?
  - Is all data logic separated from UI components?
  - Are types and documentation present?
  - Are tests included for new hooks/components?
  - Is Magic UI MCP used for UI?
  - Is CI passing before merge?
- Before creating any new function, always check if it already exists in the codebase. If it exists in the wrong place, or can be refactored to be simpler or faster, refactor it first before proceeding with your task.
- Avoid duplicating logic. Reuse and refactor existing functions and utilities whenever possible.
- Do not make files longer than 100 lines for components, hooks, and logic files. If you need to work on a file that exceeds this limit, refactor it into smaller, focused files before adding new code. (Reasonable exceptions apply for files like seed scripts, configuration, or generated code.)
- Prioritize code simplicity, readability, and performance in all refactoring and new code.

