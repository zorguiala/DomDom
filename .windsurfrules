# ü§ñ GitHub Copilot Instructions for DomDom Project

## üìã Overview

This file provides comprehensive instructions for GitHub Copilot to follow when assisting with development on the DomDom operational system for food production and manufacturing businesses. These instructions consolidate guidelines from:

- `PLANNING.md` - Architecture and design patterns
- `Project Requirements Document.md` - Project objectives and requirements
- `PROJECT_OVERVIEW.md` - Implementation status and system components
- `RULES.md` - Development guidelines and best practices and Coding Instructions section always follow them
- `TASKS.md` - Current tasks and priorities

## üéØ Project Context

DomDom is an integrated operational management system for food production businesses that includes:

- Inventory/stock management with real-time tracking
- Bill of Materials (BOM) creation and management
- Production planning and tracking
- Sales recording and invoice generation
- Employee productivity and attendance tracking
- Custom document generation
- Business analytics and reporting

The system uses a modern architecture with a NestJS backend, PostgreSQL database, and React frontend.

## üõ†Ô∏è Current Refactoring Focus

The project is currently undergoing refactoring to ensure consistent code style and organization:

1. **Frontend Component Refactoring**:

   - Resolving component duplication across the project
   - Converting component filenames from PascalCase to kebab-case
   - Reorganizing file structure to group related components
   - Extracting business logic from UI components into custom hooks

2. **Backend Code Refactoring**:
   - Reviewing files over 500 lines and splitting into modules
   - Ensuring consistent module structure across features
   - Verifying proper separation of concerns (thin controllers, logic in services)

When assisting with these tasks, be mindful of:

- Maintaining functionality during refactoring
- Updating all imports when files are moved or renamed
- Preserving type definitions and documentation
- Testing that the application builds successfully after changes

## üíº Coding Instructions

### General Guidelines

1. **Follow the Golden Rules**:

   - Keep files under 500 lines - split into modules when needed
   - Update TASKS.md file if there is any update needed
   - In tasks description be specific as much as possible
   - One task per message is ideal
   - Write documentation and comments as you go
   - Be specific in requests and provide examples
   - Test early and often
   - don't use any type unless it's necessary and if you used them add eslint ignore rule
   - To improve maintainability in modules, you can split large files into multiple smaller files, such as creating a services or utils folder with related functions. Then, import these functions where needed.
   - always check and update README.md, PLANNING.md, RULES.md, TASKS.md, PROJECT_OVERVIEW.md on each task you work on
   - create a branch in git for each task you work on and the name of the branch doesn't surpass 50 characters then push it
   - the commit message must start with 'chore:','fix:','add:','delete:' etc ...
   - you only push the commit when i tell you the task is complete
   - keep a map for the project files to make your work easier
   - when working on task don't hesitate to update both frontend and backend if needed
   - when working on the project try to create subfolder to keep it clean as possible
   - i'm using powershell windows

2. **Project Structure Awareness**:

   - Respect the existing folder organization
   - Backend uses NestJS module architecture
   - Frontend uses React component architecture with Ant Design
   - Follow established patterns in the codebase

3. **Code Modularity**:
   - Organize code into clearly separated modules grouped by feature
   - Use clear, consistent imports (prefer relative imports)
   - Check if types exist before creating new ones
   - Place types in `src/types` directory

### Frontend Development

1. **Component Guidelines**:

   - Use functional components with hooks
   - Follow kebab-case for component filenames (`production-order-list.tsx`)
   - Use PascalCase for component names (`ProductionOrderList`)
   - Separate business logic from UI using custom hooks
   - Group related components in feature folders

2. **State Management**:

   - Use React Query for server state
   - Use Context API for shared state
   - Use local state for component-specific state

3. **UI Standards**:
   - Follow Ant Design patterns consistently
   - Use i18n for all user-facing strings
   - Ensure responsive design for all components

### Backend Development

1. **Module Structure**:

   - Follow NestJS module architecture
   - Keep controllers thin, move business logic to services
   - Use DTOs for data validation
   - Follow camelCase for filenames
   - Every file should be error free
   - every Type should be in one place under \*/types/\*\*.ts folder so it will be easy to find them and look for the types

2. **API Design**:

   - Use RESTful principles
   - Document APIs with Swagger/OpenAPI
   - Follow established error handling patterns
   - Use appropriate HTTP status codes

3. **Database Interactions**:
   - Use TypeORM repositories for data access
   - Follow the established entity structure
   - Use transactions for operations that modify multiple entities

## üöÄ Implementation Priorities

Currently prioritize development in this order:

1. **Frontend and Backend Refactoring**:

   - Complete the detailed refactoring tasks outlined in TASKS.md
   - Ensure consistent code organization and naming conventions
   - Fix component duplication issues
   - Extract business logic into appropriate hooks

2. **Production Management** (currently in progress):

   - Focus on completing remaining production management features
   - Implement search and filtering for production orders
   - Add production statistics to dashboard
   - Create production reports view

3. **BOM Management Improvements**:

   - Enhance BOM component UI/UX
   - Implement material requirements and cost calculation views

4. **Upcoming Features** (after current priorities):
   - Sales Management frontend
   - Employee Management frontend
   - Document Generation frontend

