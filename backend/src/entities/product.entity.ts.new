import { Entity, Column, OneToMany } from 'typeorm';
import { BaseEntity } from './base.entity';
import { BOMItem } from './bom-item.entity';
import { StockTransaction } from './stock-transaction.entity';

@Entity('products')
export class Product extends BaseEntity {
  @Column()
  name: string;

  @Column()
  sku: string;

  @Column({ nullable: true })
  barcode: string;

  @Column('text', { nullable: true })
  description: string;

  @Column('decimal', { precision: 10, scale: 2 })
  price: number;

  @Column('decimal', { precision: 10, scale: 2, default: 0 })
  costPrice: number;

  @Column('decimal', { precision: 10, scale: 2, default: 0 })
  currentStock: number;

  @Column('decimal', { precision: 10, scale: 2, default: 0 })
  minimumStock: number;

  @Column({ default: true })
  isActive: boolean;

  @Column({ nullable: true, type: 'int' })
  leadTimeDays: number;

  @Column({ default: false })
  isRawMaterial: boolean;

  @Column()
  unit: string;

  @Column('decimal', { precision: 10, scale: 2, nullable: true })
  lastPurchasePrice: number;
  
  @Column('decimal', { precision: 10, scale: 2, default: 0 })
  averageCostPrice: number;
  
  @Column('decimal', { precision: 10, scale: 2, default: 0 })
  totalValueInStock: number;
  
  @Column('int', { default: 0 })
  totalSoldQuantity: number;
  
  @Column('decimal', { precision: 10, scale: 2, default: 0 })
  profitMargin: number;
  
  @Column({ default: false })
  lowStockAlert: boolean;

  @OneToMany(() => BOMItem, (bomItem) => bomItem.product)
  bomItems: BOMItem[];

  @OneToMany(() => StockTransaction, (transaction) => transaction.product)
  stockTransactions: StockTransaction[];
  
  // Calculated fields (not stored in database)
  get profit(): number {
    return this.price - this.costPrice;
  }
  
  get profitPercentage(): number {
    if (this.costPrice === 0) return 0;
    return (this.profit / this.costPrice) * 100;
  }
  
  get stockValue(): number {
    return this.currentStock * this.costPrice;
  }
}